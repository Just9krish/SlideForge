// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName               String
  lastName                String
  email                   String                 @unique
  emailVerified           DateTime?
  password                String
  profileImg              String?
  subscription            Boolean?               @default(false)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  lemonSqueezyApiKey      String?
  storeId                 String?
  webhooksecret           String?
  isTwoFactorEnabled      Boolean                @default(false)
  towFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?

  Projects          Project[] @relation("OwnedProjects")
  PurchasedProjects Project[] @relation("PurchasedProjects")
  Accounts          Account[]
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  slides      Json?
  userId      String   @db.Uuid
  outlines    String[]
  isDeleted   Boolean  @default(false)
  isSellable  Boolean  @default(false)
  variantId   String?
  thumbnail   String?
  themeName   String   @default("light")

  User       User   @relation("OwnedProjects", fields: [userId], references: [id])
  Purchasers User[] @relation("PurchasedProjects")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  vToken  String   @unique
  expires DateTime

  @@unique([email, vToken])
}

model ResetPasswordToken {
  id      String   @id @default(uuid())
  email   String
  rToken  String   @unique
  expires DateTime

  @@unique([email, rToken])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(uuid())
  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}
